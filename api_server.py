#!/usr/bin/env python3
"""
API —Å–µ—Ä–≤–µ—Ä –¥–ª—è Telegram Mini App (–ü—Ä–æ–¥–∞–∫—à–µ–Ω –≤–µ—Ä—Å–∏—è)
"""

import json
import sqlite3
import os
from datetime import datetime
from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.parse import urlparse, parse_qs
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from database import Database
    from pet_manager import PetManager
    from config import PET_TYPES, ACTIONS
except ImportError:
    print("‚ö†Ô∏è –ú–æ–¥—É–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-—Ä–µ–∂–∏–º")
    # –î–µ–º–æ-–≤–µ—Ä—Å–∏—è –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    PET_TYPES = {"cat": {"emoji": "üê±", "name": "–ö–æ—Ç–∏–∫"}}
    ACTIONS = {"feed": {"name": "–ü–æ–∫–æ—Ä–º–∏—Ç—å"}}

class MiniAppAPIHandler(BaseHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        try:
            self.db = Database('pets.db')
            self.pm = PetManager(self.db)
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            self.db = None
            self.pm = None
        super().__init__(*args, **kwargs)
    
    def do_OPTIONS(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type, Authorization')
        self.end_headers()
    
    def send_cors_headers(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type, Authorization')
        self.send_header('Content-Type', 'application/json')
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        parsed_url = urlparse(self.path)
        path = parsed_url.path
        query_params = parse_qs(parsed_url.query)
        
        try:
            if path == '/api/health':
                self.handle_health()
            elif path == '/api/user':
                self.handle_get_user(query_params)
            elif path == '/api/couple':
                self.handle_get_couple(query_params)
            elif path == '/api/pet':
                self.handle_get_pet(query_params)
            else:
                self.send_error(404, "Not Found")
        except Exception as e:
            self.send_error(500, str(e))
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
        parsed_url = urlparse(self.path)
        path = parsed_url.path
        
        try:
            content_length = int(self.headers.get('Content-Length', 0))
            if content_length > 0:
                post_data = self.rfile.read(content_length)
                data = json.loads(post_data.decode('utf-8'))
            else:
                data = {}
            
            if path == '/api/couple/create':
                self.handle_create_couple(data)
            elif path == '/api/pet/create':
                self.handle_create_pet(data)
            elif path == '/api/pet/action':
                self.handle_pet_action(data)
            else:
                self.send_error(404, "Not Found")
        except Exception as e:
            self.send_error(500, str(e))
    
    def handle_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
        response = {
            'status': 'ok',
            'timestamp': datetime.now().isoformat(),
            'version': '1.0.0'
        }
        
        self.send_response(200)
        self.send_cors_headers()
        self.end_headers()
        self.wfile.write(json.dumps(response).encode())
    
    def handle_get_user(self, params):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        user_id = int(params.get('user_id', [0])[0])
        
        if user_id == 0:
            self.send_error(400, "user_id required")
            return
        
        if not self.db:
            # –î–µ–º–æ-—Ä–µ–∂–∏–º
            response = {
                'user_id': user_id,
                'has_couple': False,
                'couple_id': None,
                'demo_mode': True
            }
        else:
            # –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
            couple = self.db.get_user_couple(user_id)
            response = {
                'user_id': user_id,
                'has_couple': couple is not None,
                'couple_id': couple['id'] if couple else None,
                'demo_mode': False
            }
        
        self.send_response(200)
        self.send_cors_headers()
        self.end_headers()
        self.wfile.write(json.dumps(response).encode())
    
    def handle_create_couple(self, data):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—ã"""
        user1_id = data.get('user1_id')
        user2_id = data.get('user2_id')
        user1_name = data.get('user1_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1')
        user2_name = data.get('user2_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2')
        
        if not user1_id or not user2_id:
            self.send_error(400, "user1_id and user2_id required")
            return
        
        try:
            if not self.db:
                # –î–µ–º–æ-—Ä–µ–∂–∏–º
                couple_id = int(f"{user1_id}{user2_id}")
                response = {
                    'success': True,
                    'couple_id': couple_id,
                    'message': '–ü–∞—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ! (–î–µ–º–æ-—Ä–µ–∂–∏–º)',
                    'demo_mode': True
                }
            else:
                # –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
                couple_id = self.db.create_couple(user1_id, user2_id, user1_name, user2_name)
                response = {
                    'success': True,
                    'couple_id': couple_id,
                    'message': '–ü–∞—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!',
                    'demo_mode': False
                }
            
            self.send_response(200)
            self.send_cors_headers()
            self.end_headers()
            self.wfile.write(json.dumps(response).encode())
            
        except Exception as e:
            response = {
                'success': False,
                'error': str(e),
                'demo_mode': self.db is None
            }
            
            self.send_response(400)
            self.send_cors_headers()
            self.end_headers()
            self.wfile.write(json.dumps(response).encode())

def run_api_server(port=None):
    """–ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞"""
    if port is None:
        port = int(os.environ.get('PORT', 8000))
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    print(f"üì° –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: PORT={os.environ.get('PORT', '–Ω–µ –∑–∞–¥–∞–Ω')}")
    
    try:
        server_address = ('0.0.0.0', port)
        httpd = HTTPServer(server_address, MiniAppAPIHandler)
        print(f"‚úÖ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {server_address}")
        print(f"üîó Health check: http://0.0.0.0:{port}/api/health")
        httpd.serve_forever()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        raise

if __name__ == '__main__':
    run_api_server()
