import random
from datetime import datetime, timedelta
from typing import Dict, Optional
from config import PET_TYPES, ACTIONS, PET_NAMES

class PetManager:
    def __init__(self, database):
        self.db = database
    
    def create_pet_for_couple(self, couple_id: int, pet_type: str = None, name: str = None) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞ –¥–ª—è –ø–∞—Ä—ã"""
        if not pet_type:
            pet_type = random.choice(list(PET_TYPES.keys()))
        
        if not name:
            name = random.choice(PET_NAMES)
        
        pet_id = self.db.create_pet(couple_id, name, pet_type)
        
        return {
            "id": pet_id,
            "name": name,
            "type": pet_type,
            "hunger": 100,
            "happiness": 100,
            "energy": 100,
            "level": 1,
            "experience": 0
        }
    
    def get_pet_status(self, couple_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–∏—Ç–æ–º—Ü–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏"""
        pet = self.db.get_pet(couple_id)
        if not pet:
            return None
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
        updated_pet = self._update_pet_stats_over_time(pet)
        
        return updated_pet
    
    def _update_pet_stats_over_time(self, pet: Dict) -> Dict:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∏—Ç–æ–º—Ü–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        last_updated = datetime.fromisoformat(pet['last_updated'].replace('Z', '+00:00'))
        now = datetime.now()
        time_diff = now - last_updated
        hours_passed = time_diff.total_seconds() / 3600
        
        if hours_passed < 0.1:  # –ú–µ–Ω—å—à–µ 6 –º–∏–Ω—É—Ç
            return pet
        
        pet_type = PET_TYPES[pet['pet_type']]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        hunger_decrease = int(hours_passed * pet_type['hunger_rate'])
        happiness_decrease = int(hours_passed * pet_type['happiness_rate'])
        energy_decrease = int(hours_passed * pet_type['energy_rate'])
        
        new_hunger = max(0, pet['hunger'] - hunger_decrease)
        new_happiness = max(0, pet['happiness'] - happiness_decrease)
        new_energy = max(0, pet['energy'] - energy_decrease)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.db.update_pet_stats(
            pet['id'],
            hunger=new_hunger,
            happiness=new_happiness,
            energy=new_energy
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        pet.update({
            'hunger': new_hunger,
            'happiness': new_happiness,
            'energy': new_energy
        })
        
        return pet
    
    def perform_action(self, couple_id: int, user_id: int, action_type: str) -> Dict:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–∏—Ç–æ–º—Ü–µ–º"""
        pet = self.get_pet_status(couple_id)
        if not pet:
            return {"error": "–ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        if action_type not in ACTIONS:
            return {"error": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"}
        
        action = ACTIONS[action_type]
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        new_hunger = max(0, min(100, pet['hunger'] + action['hunger']))
        new_happiness = max(0, min(100, pet['happiness'] + action['happiness']))
        new_energy = max(0, min(100, pet['energy'] + action['energy']))
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—ã—Ç
        experience_gain = self._calculate_experience_gain(action_type, pet)
        new_experience = pet['experience'] + experience_gain
        new_level = pet['level']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
        if new_experience >= pet['level'] * 100:
            new_level = pet['level'] + 1
            new_experience = 0
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.db.update_pet_stats(
            pet['id'],
            hunger=new_hunger,
            happiness=new_happiness,
            energy=new_energy,
            level=new_level,
            experience=new_experience
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        self.db.log_action(pet['id'], user_id, action_type)
        
        return {
            "success": True,
            "action": action_type,
            "pet": {
                "name": pet['name'],
                "type": pet['pet_type'],
                "hunger": new_hunger,
                "happiness": new_happiness,
                "energy": new_energy,
                "level": new_level,
                "experience": new_experience
            },
            "experience_gain": experience_gain,
            "level_up": new_level > pet['level']
        }
    
    def _calculate_experience_gain(self, action_type: str, pet: Dict) -> int:
        """–†–∞—Å—á–µ—Ç –ø–æ–ª—É—á–∞–µ–º–æ–≥–æ –æ–ø—ã—Ç–∞ –∑–∞ –¥–µ–π—Å—Ç–≤–∏–µ"""
        base_exp = {
            "feed": 5,
            "play": 15,
            "sleep": 10,
            "pet": 8
        }
        
        # –ë–æ–Ω—É—Å –∑–∞ –≤—ã—Å–æ–∫–æ–µ —Å—á–∞—Å—Ç—å–µ
        happiness_bonus = pet['happiness'] // 20  # 0-5 –±–æ–Ω—É—Å–Ω—ã—Ö –æ—á–∫–æ–≤
        
        return base_exp.get(action_type, 5) + happiness_bonus
    
    def get_pet_emoji_status(self, pet: Dict) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–∏—Ç–æ–º—Ü–∞"""
        pet_type = PET_TYPES[pet['pet_type']]
        base_emoji = pet_type['emoji']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        avg_stats = (pet['hunger'] + pet['happiness'] + pet['energy']) / 3
        
        if avg_stats >= 80:
            mood = "üòä"
        elif avg_stats >= 60:
            mood = "üòê"
        elif avg_stats >= 40:
            mood = "üòî"
        else:
            mood = "üò¢"
        
        return f"{base_emoji}{mood}"
    
    def get_pet_description(self, pet: Dict) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞"""
        descriptions = []
        
        if pet['hunger'] <= 20:
            descriptions.append("–æ—á–µ–Ω—å –≥–æ–ª–æ–¥–µ–Ω")
        elif pet['hunger'] <= 40:
            descriptions.append("–≥–æ–ª–æ–¥–µ–Ω")
        
        if pet['happiness'] <= 20:
            descriptions.append("–æ—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω—ã–π")
        elif pet['happiness'] <= 40:
            descriptions.append("–≥—Ä—É—Å—Ç–Ω—ã–π")
        elif pet['happiness'] >= 80:
            descriptions.append("–æ—á–µ–Ω—å —Å—á–∞—Å—Ç–ª–∏–≤—ã–π")
        
        if pet['energy'] <= 20:
            descriptions.append("–æ—á–µ–Ω—å —É—Å—Ç–∞–ª")
        elif pet['energy'] <= 40:
            descriptions.append("—É—Å—Ç–∞–ª")
        elif pet['energy'] >= 80:
            descriptions.append("–ø–æ–ª–æ–Ω —ç–Ω–µ—Ä–≥–∏–∏")
        
        if not descriptions:
            descriptions.append("—á—É–≤—Å—Ç–≤—É–µ—Ç —Å–µ–±—è —Ö–æ—Ä–æ—à–æ")
        
        return ", ".join(descriptions)
    
    def can_perform_action(self, action_type: str, pet: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
        if action_type == "play" and pet['energy'] < 10:
            return False
        if action_type == "sleep" and pet['energy'] > 80:
            return False
        return True 